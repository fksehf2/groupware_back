<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="comDAO">

	<resultMap id="menuList" type="frame.flyt.main.service.MenuVO">
		<result property="menuNo" 			column="MENU_NO"/>
		<result property="menuNm" 			column="MENU_NM"/>
		<result property="upperMenuNo" 	    column="UPPER_MENU_NO"/>
		<result property="menuOrdr" 		column="MENU_ORDR"/>
		<result property="depthFullname" 	column="DEPTH_FULLNAME"/>
		<result property="lvl" 			    column="LVL"/>
		<result property="url" 				column="URL"/>
		<result property="menuAuthor" 		column="MENU_AUTHOR"/>
		<result property="cnt"		 		column="CNT"/>
	</resultMap>

	 <resultMap id="codeList" type="frame.fcom.service.CodeVO">
		<result property="cdId"   column="CD_ID"/>
		<result property="cdIdNm" column="CD_ID_NM"/>
		<result property="cd"     column="CD"/>
		<result property="cdNm"   column="CD_NM"/>
	</resultMap>

	<!-- 메뉴 목록을 조회한다. -->
	<select id="selectMenuList" parameterType="java.util.Map" resultMap="menuList">
		<![CDATA[
        /* selectMenuList 메뉴 목록을 조회한다 */
		SELECT
			MENU_NO
			,MENU_NM
			,UPPER_MENU_NO
			,MENU_ORDR
			,DEPTH_FULLNAME
			,LVL
			,URL
			,MENU_AUTHOR
			,CASE WHEN LVL = 2 THEN MENU_ORDR ELSE ( SELECT MENU_ORDR FROM  MENUINFO D WHERE C.UPPER_MENU_NO= D.MENU_NO LIMIT 1) END UP_MENU_ORD
			,CASE 
			    WHEN LVL = 2 THEN 0 
			    ELSE  
			        COUNT(*) OVER(PARTITION BY UPPER_MENU_NO)
			    END AS CNT
		FROM (
			WITH RECURSIVE CTE_CONNECT_BY AS (
				SELECT
					1 AS LEVEL
					, MENU_NM  AS CONNECT_BY_PATH
					, S.*
				FROM
					MENUINFO S
				WHERE
					MENU_NO = MENU_NO
					AND UPPER_MENU_NO IS NULL
					AND SYS_GRP = #{upperMenuNo}
				UNION ALL
				SELECT
					LEVEL + 1 AS LEVEL, CONCAT(CONNECT_BY_PATH, " > ", S.MENU_NM) AS CONNECT_BY_PATH, S.*
				FROM
					CTE_CONNECT_BY R
				INNER JOIN MENUINFO S ON
					R.MENU_NO = S.UPPER_MENU_NO AND S.MENU_DISPLAY_YN = 'Y'
													AND S.USE_YN = 'Y'
			)
			SELECT
				MENU_NO
				,MENU_NM
				,UPPER_MENU_NO
				,LEVEL AS LVL
				,CONNECT_BY_PATH AS DEPTH_FULLNAME
				,MENU_ORDR
				,A.PROGRAM_ID
				,B.URL
				,MENU_AUTHOR
			FROM
				CTE_CONNECT_BY A LEFT OUTER JOIN PROGRAM_LIST B ON A.PROGRAM_ID = B.PROGRAM_ID
			WHERE
				LEVEL > 1
		) C
		WHERE 1=1 AND LVL IN (1,2,3)  
		ORDER BY UP_MENU_ORD, LVL, MENU_ORDR IS NULL, MENU_ORDR
        ]]>
    </select>
    
    <!-- 코드 목록을 조회한다. -->
    <select id="queryCodeList" parameterType="java.util.HashMap" resultType="egovMap">
        <![CDATA[
        	/* selectCodeList 코드 목록을 조회한다 */
			 SELECT A.CD_ID, A.CD_ID_NM, B.CD, B.CD_NM
			  FROM CODE A, CODE_DTL B
			 WHERE A.CD_ID = B.CD_ID
			    AND A.USE_YN = 'Y'
			    AND B.USE_YN = 'Y'
        ]]>
            <if test="cdId != null and cdId != ''">
            	AND A.CD_ID IN
                <foreach collection="cdId" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
        <![CDATA[
			ORDER BY A.CD_ID ASC, B.SORT_ORD ASC, B.CD ASC
        ]]>
    </select>
    
    <!-- 코드 목록을 조회한다. -->
    <select id="queryAjaxCodeList" parameterType="java.util.HashMap" resultType="egovMap">
        <![CDATA[
        	/* queryAjaxCodeList 코드 목록을 조회한다 */
			 SELECT A.CD_ID, A.CD_ID_NM, B.CD, B.CD_NM, #{target} AS TARGET
			  FROM CODE A, CODE_DTL B
			 WHERE A.CD_ID = B.CD_ID
			    AND A.USE_YN = 'Y'
			    AND B.USE_YN = 'Y'
        ]]>
            <if test="cdId != null and cdId != ''">
            	<!-- AND A.CD_ID IN
                <foreach collection="cdId" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach> -->
                AND A.CD_ID = #{cdId}
            </if>
        <![CDATA[
			ORDER BY A.CD_ID ASC, B.SORT_ORD ASC, B.CD ASC
        ]]>
    </select>
    
    <!-- 첨부파일 목록을 조회한다. -->
    <select id="comDAO.selectAtchFileList" parameterType="java.util.Map" resultType="fileList">
	/* comDAO.selectAtchFileList 첨부파일 목록을 조회한다 */
    SELECT ATCH_FILE_ID     AS atchFileId
         , FILE_SNO         AS fileSno
         , ATCH_FILE_DIV    AS atchFileDiv
         , FILE_PTH         AS filePth
         , FILE_NM          AS fileNm
         , FILE_SIZE        AS fileSize
         , ORI_FILE_NM      AS oriFileNm
         , REMARK			AS remark
      FROM ATCH_FILE_DTL
     WHERE ATCH_FILE_ID = #{atchFileId}
     <if test="fileSno != null and fileSno != '' ">
        AND FILE_SNO = #{fileSno}
     </if>
       AND USE_YN   = 'Y'
     ORDER BY ATCH_FILE_ID ASC, FILE_SNO ASC
    </select>

	<!-- 첨부파일 등록 -->
    <insert id="comDAO.insertAtchFile">
        <selectKey resultType="int" keyProperty="atchFileId" order="BEFORE">
          SELECT NEXTVAL(TB_ATCH_FILE_SEQ)
        </selectKey>
    	/* comDAO.insertAtchFile 첨부파일 등록 */
        <![CDATA[ 
            INSERT INTO ATCH_FILE
                ( ATCH_FILE_ID
                  , USE_YN
                  , REGR_ID
                  , REG_DT
                )
            VALUES ( #{atchFileId}
                  , 'Y'
                  , #{loginId}
                  , NOW()
                  )
        ]]>
    </insert>
    
    <!-- 첨부파일상세 등록 -->
    <insert id="comDAO.insertAtchFileDtl">
        <selectKey resultType="int" keyProperty="fileSno" order="BEFORE">
            SELECT IFNULL(MAX(FILE_SNO)+1,1) AS FILE_SNO  
              FROM ATCH_FILE_DTL
             WHERE ATCH_FILE_ID = #{atchFileId}
        </selectKey>
    	/* comDAO.insertAtchFileDtl 첨부파일상세 등록 */
        <![CDATA[ 
            INSERT INTO ATCH_FILE_DTL
                (
					  ATCH_FILE_ID                 
					, FILE_SNO
					, ATCH_FILE_DIV
					, FILE_PTH
					, FILE_NM
					, FILE_SIZE
					, ORI_FILE_NM
					, USE_YN
					, UPDR_ID
					, UPD_DT
					, REMARK
                )
            VALUES ( 
                      #{atchFileId}
                    , #{fileSno}
                    , #{atchFileDiv}
                    , #{filePth}
                    , #{fileNm}
                    , #{fileSize}
                    , #{oriFileNm}
                    , 'Y'
                    , #{loginId}
                    , NOW()
                    , #{remark}
                   )
        ]]>
    </insert>
    
    <!-- 첨부파일 삭제 -->
    <update id="comDAO.deleteAtchFile">
 	/* comDAO.deleteAtchFile 첨부파일 삭제 */
     UPDATE ATCH_FILE
        SET USE_YN  = 'N'
      WHERE ATCH_FILE_ID = #{atchFileId}
    </update>
    
    <!-- 첨부파일상세 삭제 -->
    <update id="comDAO.deleteAtchFileDtl">
	/* comDAO.deleteAtchFileDtl 첨부파일상세 삭제 */
    UPDATE ATCH_FILE_DTL
       SET USE_YN  = 'N'
         , UPDR_ID = #{loginId}
         , UPD_DT  = NOW()
     WHERE USE_YN  = 'Y'
       AND ATCH_FILE_ID = #{atchFileId}
    </update>
    
    <!-- 첨부파일상세 수정 -->
    <insert id="comDAO.updateAtchFileDtl">
        	/* comDAO.updateAtchFileDtl 첨부파일상세 수정 */
           <!--  MERGE INTO ATCH_FILE_DTL
                 USING DUAL
                    ON (ATCH_FILE_ID = #{atchFileId} AND FILE_SNO = #{fileSno})
            WHEN MATCHED
            THEN
               UPDATE SET USE_YN = 'Y'
                        , UPDR_ID  = #{loginId}
                        , UPD_DT   = NOW()
                        , REMARK   = #{remark}
            WHEN NOT MATCHED
            THEN
               INSERT     (FILE_SNO
                          ,FILE_PTH,  FILE_NM,  FILE_SIZE,  ORI_FILE_NM, ATCH_FILE_ID
                          ,UPD_DT,  UPDR_ID,   ATCH_FILE_DIV, USE_YN, REMARK)
                   VALUES ((SELECT NVL(MAX(FILE_SNO),0)+1 FROM ATCH_FILE_DTL WHERE ATCH_FILE_ID = #{atchFileId}) 
                          , #{filePth}
                          , #{fileNm}
                          , #{fileSize}
                          , #{oriFileNm}
                          , #{atchFileId}
                          , NOW()
                          , #{loginId}
                          , #{atchFileDiv}
                          , 'Y' 
                          , #{remark}) -->
                          
                          
              INSERT INTO ATCH_FILE_DTL
              			  (FILE_SNO
                          , FILE_PTH
                          , FILE_NM
                          , FILE_SIZE
                          , ORI_FILE_NM
                          , ATCH_FILE_ID
                          , UPD_DT
                          , UPDR_ID
                          , ATCH_FILE_DIV
                          , USE_YN
                          , REMARK)
                   VALUES ((SELECT IFNULL(MAX(FILE_SNO)+1,1) FROM ATCH_FILE_DTL a WHERE ATCH_FILE_ID = #{atchFileId}) 
                          , #{filePth}
                          , #{fileNm}
                          , #{fileSize}
                          , #{oriFileNm}
                          , #{atchFileId}
                          , NOW()
                          , #{loginId}
                          , #{atchFileDiv}
                          , 'Y' 
                          , #{remark})
               ON DUPLICATE KEY UPDATE  
                          USE_YN  = 'Y'
                        , UPDR_ID = #{loginId}
                        , UPD_DT  = NOW()
                        , REMARK  = #{remark}
    </insert>
    
    <!-- 코드 목록을 조회한다. -->
    <select id="comDAO.selectCodeList" parameterType="java.util.Map" resultMap="codeList">
    /* comDAO.selectCodeList 코드 목록을 조회한다 */
	 SELECT A.CD_ID, A.CD_ID_NM, B.CD, B.CD_NM
	   FROM CODE A, CODE_DTL B
	  WHERE A.CD_ID = B.CD_ID
	    AND A.USE_YN = 'Y'
	    AND B.USE_YN = 'Y'
        <if test="cdId != null and cdId != '' ">    
        AND A.CD_ID IN 
        <foreach item="item" index="index" collection="cdId" open="(" close=")" separator=",">
	    	#{item}
	    </foreach>    
	    </if>
	  ORDER BY A.CD_ID ASC, B.SORT_ORD ASC, B.CD ASC 
    </select>
    
     <!-- 코드 목록을 조회한다. -->
    <select id="comDAO.selectCodeList2" parameterType="java.util.Map" resultMap="codeList">
   	/* comDAO.selectCodeList2 코드 목록을 조회한다 */
	 SELECT A.CD_ID, A.CD_ID_NM, B.CD, B.CD_NM
	   FROM CODE A, CODE_DTL B
	  WHERE A.CD_ID = B.CD_ID
	    AND A.USE_YN = 'Y'
	    AND B.USE_YN = 'Y'
	    <if test="cd != null and cd != '' ">    
        AND B.CD IN 
        <foreach item="item" index="index" collection="cd" open="(" close=")" separator=",">
   			#{item}
	    </foreach>    
	    </if>
	  ORDER BY A.CD_ID ASC, B.SORT_ORD ASC, B.CD ASC 
    </select>    
 
     <!-- 코드 목록을 조회한다. -->
    <select id="comDAO.selectCodeRangeList" parameterType="java.util.Map" resultMap="codeList">
     /* comDAO.selectCodeRangeList 코드 목록을 조회한다. */
      SELECT A.CD_ID, A.CD_ID_NM, B.CD, B.CD_NM
        FROM CODE A, CODE_DTL B
       WHERE A.CD_ID = B.CD_ID
         AND A.USE_YN = 'Y'
         AND B.USE_YN = 'Y'
         <if test="cdId != null and cdId != '' ">    
         AND A.CD_ID IN 
         <foreach item="item" index="index" collection="cdId" open="(" close=")" separator=",">
	     	#{item}
         </foreach>    
        </if>
        <if test="minerCdId != null and minerCdId != '' ">    
        AND B.CD IN 
        <foreach item="item" index="index" collection="minerCdId" open="(" close=")" separator=",">
	    	#{item}
        </foreach>    
        </if>   
      ORDER BY A.CD_ID ASC, B.SORT_ORD ASC, B.CD ASC 
   </select>
 	
</mapper>
